set nocompatible " use vim defaults
filetype on

"
" vim-plug
"
call plug#begin('~/.vim/bundle')

Plug 'dense-analysis/ale'
Plug 'junegunn/vim-easy-align'
Plug 'mileszs/ack.vim'
Plug 'mkitt/tabline.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'

" language specific plugins
" Plug 'elixir-editors/vim-elixir'

" fuzzy finder
" Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
" Plug 'junegunn/fzf.vim'

" themes
Plug 'rose-pine/vim'
Plug 'dracula/vim', { 'name': 'dracula' }

call plug#end()

set signcolumn=yes
set completeopt=menu,menuone,noselect

"
" cursor
"
let &t_EI = "\e[1 q" " normal, blinking block (default)
let &t_SI = "\e[6 q" " insert, steady bar (xterm)

"
" basic.settings
"
syntax on " turn syntax highlighting on by default


"
" shell
"
" set shell=/opt/homebrew/bin/fish
set shell=/bin/zsh

set encoding=utf-8 " set default encoding to UTF-8
set scrolloff=3    " keep 3 lines when scrolling
set mouse=a        " a: all; n: normal; v: visual

set autoread   " reload changes
set showcmd    " display incomplete commands
set number     " show line numbers
set ruler      " show the current row and column
set splitbelow " show split window on the bottom

"
" folding
"
set foldmethod=indent
set foldlevelstart=6

"
" backup, swap and undo
"
set backupdir-=.
set backupdir^=~/tmp,/tmp

set noswapfile
set nobackup
set nowb

"
" spaces and tabs
"
set nowrap
set linebreak
set autoindent
set smarttab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab                   " use spaces, not tabs
set backspace=indent,eol,start  " make that backspace key work the way it should

"
" invisibles / whitespaces
"
set list                  " show invisible characters
set listchars=            " reset the listchars
set listchars+=tab:»\     " show tab spaces as »
set listchars+=extends:›  " show ‹ or › when characters are not displayed on the left or right
set listchars+=precedes:‹ " show ‹ or › when characters are not displayed on the left or right
set listchars+=nbsp:·     " show whitespace as ·
set listchars+=trail:·    " show trailing spaces as ·

"
" visual assist
"
set cursorline     " highlight current line
set colorcolumn=0  " disable line length limit column

"
" status line
"
set laststatus=2
set statusline+=\ %<%t%m%r%h%w                    " File path, modified, readonly, helpfile, preview
set statusline+=%=                                " Right Side
set statusline+=\ %{FugitiveStatusline()}
set statusline+=\ %3l,%-3v                        " Colomn number
set statusline+=\ %Y                              " FileType
set statusline+=\ %{''.(&fenc!=''?&fenc:&enc).''} " Encoding
set statusline+=\ (%{&ff})                        " FileFormat (dos/unix..)
set statusline+=\ %3p%%                           " Line number / total lines, percentage of document
set statusline+=\ %-2n                            " Buffer number

"
" search settings
"
set hlsearch   " highlight searches
set incsearch  " do incremental searching
set showmatch  " jump to matches when entering regexp
set ignorecase " ignore case when searching
set smartcase  " no ignorecase if Uppercase char present

"
" anoying features
"
set visualbell " turn off error beep/flash
set errorbells " turn off visual bell

"
" wildmenu
"
set wildmenu        " enable wildmenu for completion
set wildoptions=pum " display a vertical menu

"
" ignore list
"
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/tmp/*,*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/sorbet/*,*/.sass-cache/*
set wildignore+=*.swp,*~,._*

"
" colors & themes
"
colorscheme default

" when on, uses |highlight-guifg| and |highlight-guibg| attributes in the
" terminal (thus using 24-bit color).
" set termguicolors

let g:lightline = { 'colorscheme': 'one' }

"
" Ack / Ag
"
let g:ackprg = 'ag --vimgrep'

"
" ALE
"
let g:ale_linters = {
  \ 'ruby':       ['rubocop'],
  \ 'eruby':      ['erubi'],
  \ 'yaml':       ['prettier'],
  \ 'json':       ['prettier'],
  \ 'javascript': ['prettier'],
  \ 'rust':       ['rustc', 'cargo'],
  \ }

let g:ale_fixers = {
  \ '*':          ['remove_trailing_lines', 'trim_whitespace'],
  \ 'ruby':       ['rubocop'],
  \ 'yaml':       ['prettier'],
  \ 'json':       ['prettier'],
  \ 'javascript': ['prettier'],
  \ 'rust':       ['rustfmt'],
  \}

let g:ale_fix_on_save = 1
let g:ale_rust_cargo_use_check = 1

"
" auto commands
"

" remove trailling white spaces (when not using ale)
" autocmd BufWritePre * %s/\s\+$//e

"
" key mappings
"
let mapleader = ' '

"
" FZF fuzzy finder
"

" fzf disable preview window
" let g:fzf_preview_window = ['right:50%', 'ctrl-/']

" nmap <Leader>f :GFiles<CR>
" nmap <Leader>ff :Files<CR>
" nmap <Leader>b :Buffers<CR>
" nmap <Leader>h :History<CR>

"
" EasyAlign
"
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

nmap <leader>hs :set hlsearch! hlsearch?<CR>  " toggle hlsearch with <leader>hs
nmap <silent> <leader>cd :lcd %:h<CR>         " cd to the directory containing the file in the buffer

" map up and down
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"

" Use <C-j> for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
inoremap <silent><expr> <C-j>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<ESC>" :
      \ coc#refresh()

inoremap <expr><C-k> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <TAB> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <TAB> coc#pum#visible() ? coc#pum#confirm()
      \: "\<C-g>u\<TAB>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
